El servidor es la m치quina donde corre la aplicaci칩n web. (en realidad es el programa que atienede los pedidos del usuario)
El cliente es quien se conecta al servidor para interactuar con la app.

Una pregunta que puede surgirnos es: donde se esta ejecutando el codigo de nuestra aplicacion? en el cliente o en el servidor?

Hasta ahora todo lo escrito ha estado funcionando del lado del servidor.

Ahora aprendemos codigo que corre en el navegador del cliente y no en el servidor.
Por que quisieramos tener codigo que corra en el cliente y no en el server?
 1) Xq queremos bajar la demanda, la carga, del servidor.
 2) Xq el resultado de una operacion podria ser mucho mas rapido.

Para eso existe JavaScript.
Con JavaScript haremos trabajo de computo sin recurrir, en general, al servidor.

Cada navegador es un mundo en cuanto al entendimiento de JavaScript por lo que se recurre a la adopcion de estandares,
que no son mas que reglas en las que todos nos ponemos de acuerdo sobre versiones de javascript que todo navegador 
debe entender por igual.
Hoy en dia el estandar mas popular es el "ES6"

Si el JS va en una pagina web, el codigo se ubica dentro del tag "script".
Las lineas de codigo JS terminan con punto y coma ';'

Generalmente no queremos que nuestro codigo JS corra al entrar a una pagina sino que 
queremos que corra cuando algo sucede. Este "algo" se llama "EVENTO".

En JS definimos funciones asi
    function nombre_funcion() {
        // codigo
    }

La ejecucion de codigo JS generalmente debe responder a eventos. Estos pueden ser:
    - onclick
    - onmouseover
    - onkeydown
    - onkeyup
    - onload -- cuando la pagina carga completamente
    - onblur -- cuando un elemento pierde el foco
    - ...

Empezamos a usar la info que tenemos en el DOM, es decir el 
Document Object Model, el contenido de la pagina para manipular los elementos mediante JS.

Queries dentro del documento HTML.
document representa la pagina html completa.
el metodo document.querySelector('selectorCSS') permite buscar el primer selector CSS pasado como parametro por toda la pagina.
Un elemento HTML tiene la propiedad innerHTML, la cual contiene todo el contenido del tag.
Otros ejemplos de selectores CSS son:
    document.querySelctor('tag')
    document.querySelctor('#id')
    document.querySelctor('.class')


Variables en JS. Hay MUCHAS formas de definir variables.
    const, let, var.
    
    const   ->  no puede cambiar su valor.
    let     ->  variable que no existe fuera del bloque donde fue declarada.
    var     ->  vive en toda la funcion donde fue declarada.

    let nom_variable = valor;


Comparar valores en JS 
    === permite comparar total exactitud

Agregar escuchas de eventos (EventListener) al documento 
    document.addEventListener('nomEvento', function(){
        document.querySelector('button').onclick = count;
    });
Uno puede ser el DOMContentLoaded. El evento representa la carga completa de la pagina. Cuando la pagina carga, hacer...

El codigo JS puede separarse de un archivo HTML.

Si usamos JS podemos valernos de la consola interna al navedaror en el apartado "Console"

La consola del navegador permite ejecutar codigo JS como si fuese una linea de comando

Podemos usar JS para cambiar el estilo de un elemento HTML, como se ve en 'color0.html'

Aprendemos que un elemento HTML tiene un atributo data que puede contener informacion que nos sea util para usar en nuestra pagina.
Tal cual se ve en 'color1.html'

En JS es muy comun el uso de funciones y el poder pasarlas como parametro,
por lo que en ES6 se adapta su uso. En ES6 tenemos arrow notation sintax.
Un Arrow Function que no recibe parametros tiene esta pinta
    () => {
        alert('Hello, world!');
    }
Este codigo implica tomar () y ejecutar => {...}
Un Arrow Function que recibe "x" como parametro tiene esta pinta
    x => {
        alert(x);
    }
    x => x * 2;


Los elementos HTML cuando son usados con JS tienen propiedades que pueden 
ser usadas para manipular el DOM. 
En el ejemplo 'tasks0.html' podemos ver como se usa la propiedad append 
para agregar un elemento <li> al elemento <ul>

jQuery es libreria JS que permite manipular el DOM.
JS permite tener una performance similar a jQuery mediante el uso 
de querySelector y querySelectorAll.
jQuery a침ade complejidad por lo que resulta en m치s demora al cargar.

mediante la funcion 'setInterval' podemos ejecutar una funcion propia cada cierto tiempo.
    setInterval(nomFuncion, milisegundos)

JS permite almacenar informacion en la pc porque tiene LOCAL STORAGE.
El elemento localStorage permite guardar informacion con el formato
    localStorage.setItem('key', value);
y recuperarla con 
    localStorage.getItem('key');

Las keys del localStorage se almacenan segun el nombre de domino, por lo que se evita
pisar valores de igual clave para distintos sitios web.
Por esto hay que tener cuidado si usamos localStorage con igual nombre
de claves en dos paginas distintas pero en el mismo dominio, como por ejemplo la casa de uno.

Se introduce AJAX, que significa Asincronic Javascript And XML.
Es algo que nos permite pedir informacion a un servidor sin tener que recargar la pagina
completa.

Una de las formas de usas AJAX es enviar informacion al servidor por medio de un formulario
y recibir un objeto JSON por parte del server.

Se introducen los WEB SOCKETS
Cuando hablamos de comunicacion cliente-servidor, el servidor responde a cada pedido del cliente.
Si no hay pedidos no hay respuestas.
En una aplicacion de chat, por ejemplo, nosotros quisieramos no tener que actualizar la
pagina para ver nuevos mensajes, nos gustaria que la actualizacion fuese en tiempo real (full-duplex comunication)
Socket.IO es biblioteca JS que permite hacer esto.



Nos quedamos en min 1.30.00.