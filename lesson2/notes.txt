Empezamos con python 3. Es un lenguaje interpretado.

Aprendemos python. Vemos tipos de variables, condiciones, etc.
Abrimos la consola python escribiendo en una terminal "python"

Podemos importar otros archivos .py a nuestro archivo actual. Esto es muy util
cuando queremos utilizar funciones declaradas en otros sitios.
Si importamos un archivo haciendo 
    "from nom_arch import nom_func"
python ejecutara todo el archivo "nom_arch" antes de nuestro nuevo codigo.
La solucion a esto seria definir una nueva funcion llamada main en el arhcivo que 
estamos importando para que no se ejecute automaticamente.
Ademas de esta funcion "main" podemos agregar el bloque:
    "
    if __name__ == "__main__":
        main()
    "
Este sencillo bloque de codigo significa que se ejecutara el main solo si 
el nombre del archivo que estamos llamando es el que corresponde al modulo .py

Aprendemos de Clases en python. Es la forma que tiene python de definir nuevos tipos de datos

Excepciones:
    IndexError  ->  ocurre cuando queremos acceder a una posicion de una lista que esta fuera del rango de la cantidad
                    de elementos.
    NameError   ->  se llama a una funcion que no se encuentra

HTTP: hyper text transfer protocol - forma en la que funciona el internet y que se comunican servidores con computadoras
Una compu genera un request a un servidor, el server lo procesa y genera una http response
Para trabajar con el servidor podemos valernos de Flask

Flask es un microframework escrito en python.
en web\src\first tenemos una simple aplicacion flask escrita en application.py
Para correrla ejecutamos en la consola "flask run" dentro de la carpeta que contiene
el archivo "application.py"

Flask maneja muchas de sus configuraciones por medio de 
variables de entorno. Una de ellas es el nombre por defecto del archivo .py que debe correr el servidor web
Para configurar las variables de entorno debemos hacerlo con el comando:
    export FLASK_VARIABLE=valor
Ej:
    export FLASK_APP=application.py

Flask por defecto corre en el puerto 5000
En routes1 tenemos una aplicacion que recibe parametros en la url

Usamos render_template para redirigir al usuario a una pagina ".html"
Flask automaticamente buscara nuestras vistas dentor de una carpeta "templates" que este en el mismo
directorio que nuestra app.py

variables0 contiene una aplicacion que pasa parametros a una vista.
El acceso de variables python desde la vista se lo debemos a "Jinja2"

Flask puede recargar cada vez que hay un cambio del codigo siempre y cuando estemos en modo DEBUG

Jinja2 permite usar paginas .html como layouts para otras paginas. Esto
no es nada mas que herencia de templates

Gracias a un backend server podemos usar informacion de formularios.
El uso de formularios requerira importar el modulo "request"
En forms aprendemos a distinguir responses en base a metodos GET y POST

Introducción a variables de sesión.
Las variables de sesión permiten almacenar información correspondiente al usuario que está 
visitando la página
Este tipo de variables mueren cuando se reinicia el server.

Importamos el modulo "session" para trabajar con variables de sesion 
pertenecientes a cada usuario

Nos falta aprender sobre bases de datos y su conexión con Flask 
para poder tener persistendia de la información que maneje la app.