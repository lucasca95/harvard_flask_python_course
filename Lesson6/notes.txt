En Lesson 5...
    Trabajmos en el diseño de aplicaciones web usando Python y Flask, y aprendimos
    un poco de JavaScript, lenguaje utilizado para correr código dentro de nuestro navegador, en 
    el lado del cliente, con el objeto de hacer tareas más dinámicamente e interfaces interactivas.

En Lesson6 vamos a seguir con esa corriente: hacer apps dinámicas.

Single-Page Apps
    El concepto trata sobre tomar contenido que usualmente ubiese estado en diferentes páginas o, digamos, 
    distintas rutas Flask y en donde la página va a hacer un pedido de información al servidor dependiendo
    de lo que necesite mostrar en pantalla.
    Una de las tecnologías que vimos en Lesson5 fue AJAX, que permitía de forma asíncrona hacer requests
    al servidor cuando necesitabamos mostrar más información en nuestra página.
    El objetivo las single-page apps va orientado a eso.

En multipage/ tenemos una app flask multipagina. Debemos cambiar de pagina si queremos ver nuevo contenido.

En singlepage/ logramos el mismo comportamiento con una unica pagina y tres metodos para mostrar tres comportamientos distintos.
Usamos AJAX para tener funciones dinamicas de carga.

Cuales serian los beneficios de tener una unica pagina en vez de muchas?
    -No tenemos que recargar la pagina!
    -Si tuvieramos mucho contenido no necesitariamos recargar todo sino solamente lo que debe 
    actualizarse.

Desventajas?
    -En un ambiente multipagina la url cambia mientras que la url permanece igual 
    y el usuario puede necesitar saber donde esta mientras navega por un sitio web.

Como podemos simular ese cambio de url sin que la pagina deba recargarse completamente?
    En HTML5 tenemos lo que se llama HTML5 History API. Es una funcionalidad de HTML que nos permite
    conocer el historial del navegador y actualizar la URL para mostrar lo que quiero.
    La forma de conseguirlo es hacer un PUSH del estado de la URL al historial del navegador.

// history.pushState(1, 2, 3);
    // 1: dato que quiero asociar con el push
    // 2: titulo de la pag que queremos pushear
    // 3: URL que queremos pushear
    EJ:
        history.pushState(null, name, name);
Esta es la forma correcta de cambiar la URL en single-page.
Si dejamos solo estas lineas tendriamos un problema: si presiono la flecha 'atras' del navegador, la URL cambiara pero no el contenido 
pertinente para esa URL. Esto se debe a que no tenemos un codigo JS que le indique al navegador 
que hacer si se presiona la flecha 'atras'.
Para arreglarlo necesitamos hacer un 'pop' a la pila de urls de la history API.
La API dispone de un evento que se llama 'onpopstate' y es justamente lo que necesitamos para desapilar
urls y darles un comportamiento.

En singlepage2/ usamos pasaje de parametros al pushear junto con el evento onpopState aplicado al objeto windows
    window.onpopstate = e => {
        const data = e.state;
        document.title = data.title;
        document.querySelector('main').innerHTML = data.text;
    };
De esta forma se actualiza el contenido al tocar la flecha 'atras'.

Habiendo implementado un comportamiento para la flecha 'atras' ya tenemos resuelto por el navegador el comportamiento 
para la flecha 'adelante'.

Trabajando con los objetos JS: document & window.
    window.innerWidth me da el ancho de la ventana
    window.innerHeight me da el alto de la ventana
        Hay que tener cuidado porque la ventana puede estarmostrando solo una parte 
        del documento y las dimensiones del doc son mas grandes q las de la ventana.
    window.scrollY me da cuantos pixeles estoy alejado desde el inicio del documento hasta
    el inicio de la ventana
    document.body.offsetHeight me da la altura de todo el documento completo.
        Con window.scrollY & document.body.offsetHeight puedo saber si estoy al final de la pagina 
        Como puede ser esto util? Podemos implementar 'autoloading' en JS.

Aprendimos que Python permite, al asignar contenido en una variable, dar un valor por defecto en caso 
que uno de los valores no exista.
    start = int(request.form.get('start') or 0)
        En este caso, si no existe un elemento del form con name='start', la variable start valdra 0.

Seguimos con JS Templates.
    Los Templates son formatos de elementos HTML que se llenan dinamicamente con informacion para 
    ser agregados al DOM.
Una de las librerias es Handlebars.
Usamos un script marcado con un ID para asociar un template que Handlebars sabra leer 
para crear elementos recibiendo parametros con sintax jinja.

Los templates de Handlebars se generan en el Client side, mientras que los de Jinja se generan en el Server side.

Handlebars permite usar estructuras de control.

Para impedir que jinja actue y se confunda con sintaxis handlebar podemos usar:
    {% raw -%}
        ...
    {%- endraw %}

Nos quedamos en min 1.05.00.